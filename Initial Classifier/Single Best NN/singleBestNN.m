% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 03-Dec-2016 13:46:39
%
% This script assumes these variables are defined:

D= importdata('handwriting.data');
samples= size(D,1);
Y= D(:,1);
trainX= D(:,2:end);

for i=1:samples
    trainY(i,Y(i,1)+1) = 1;
end
x = trainX';
t = trainY';

n_randomrestart = 5;
accs = zeros(n_randomrestart,1);
test_accs = zeros(n_randomrestart,1);
train_accs = zeros(n_randomrestart,1);

test_errs = zeros(n_randomrestart,1);
train_errs = zeros(n_randomrestart,1);

val_accs = zeros(n_randomrestart,1);
%Random restarts 
for i=1:n_randomrestart
       lambda = 0.1;
        trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

         % Create a Pattern Recognition Network
         hiddenLayerSize =250;
         net = patternnet(hiddenLayerSize, trainFcn);
         
         net.layers{1}.transferFcn = 'tansig';
        % Setup Division of Data for Training, Validation, Testing
        net.divideFcn = 'divideblock';
        [trainInd,valInd,testInd] = divideblock(x,75/100,15/100,10/100);

        net.performParam.regularization =lambda;
        % Train the Network
        [net,tr] = train(net,x,t);

        % Overall Performance
        outputs = net(x);
        e = gsubtract(t,outputs);
        performance = perform(net,t,outputs);

     
        yind = vec2ind(outputs);
        tind = vec2ind(t);
        % accuracy
        accs(i,1) = sum(tind == yind)/ numel(yind);
         
        %Train Performance
        trInd = tr.trainInd;
        trOutputs = net(x(:,trInd));
        trPerform = perform(net,t(:,trInd),trOutputs);
        yind = vec2ind(trOutputs);
        tind = vec2ind(t(:,trInd));
        
        % accuracy
        train_accs(i,1) = sum(tind == yind)/ numel(yind);
        %Error
        train_errs(i,1) = sum(tind ~= yind)/ numel(yind);
        
        %Test Performance
        tInd = tr.testInd;
        tstOutputs = net(x(:,tInd));
        tstPerform = perform(net,t(:,tInd),tstOutputs);
        yind = vec2ind(tstOutputs);
        tind = vec2ind(t(:,tInd));
        
        % accuracy
        test_accs(i,1) = sum(tind == yind)/ numel(yind);
        %Error
        test_errs(i,1) = sum(tind ~= yind)/ numel(yind);
        
        %Validation Performance
        vInd = tr.valInd;
        valOutputs = net(x(:,vInd));
        valPerform = perform(net,t(:,vInd),valOutputs);
        yind = vec2ind(valOutputs);
        tind = vec2ind(t(:,vInd));
        
        % accuracy
        val_accs(i,1) = sum(tind == yind)/ numel(yind);
end      

testAcc= max(max(test_accs)); %Maximum Test Accuracy
trainAcc= max(max(train_accs)); %Maximum Train Accuracy



